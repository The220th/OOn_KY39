package lab;

import java.lang.*;
import java.util.*;

import lab.*;

import java.util.List;

import java.io.FileOutputStream;
import java.util.Date;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.*;

import org.apache.log4j.Logger;

/**
 * Класс, отвечающий за генерацию отчётов PDF
 * 
 */
public class ReportMaker
{
    private static final Logger log = Logger.getLogger(ReportMaker.class);

    //private String FILE = "./Report.pdf";
    private String FILE;
    private static Font t_font = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.NORMAL);
    private static Font c_font = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.NORMAL);
    private Document document;

    private Salon salon;
    private int D_W_M;
    private Date d;
    private Set<Service> ss;

    /**
     * Сделать отчёт PDF
     * 
     * @param salon салон, отчёт которого делается
     * @param ss множество сервисов, которые будут отражены в отчёте
     * @param D_W_M день=0/неделя=1/месяц=2
     * @param d дата соответствующая D_W_M
     * @param path путь к файлу
     */
    public synchronized static void makeReport(Salon salon, Set<Service> ss, int D_W_M, Date d, String path)
    {
        new ReportMaker(salon, ss, D_W_M, d, path);

        log.info("OT4ET PDF rOTOB");
    }

    private ReportMaker(Salon salon, Set<Service> ss, int D_W_M, Date d, String path)
    {
        this.salon = salon;
        this.D_W_M = D_W_M;
        this.d = d;
        this.ss = ss;
        this.FILE = path;

        try
        {
            //document = new Document();
            document = new Document(PageSize.A4.rotate());
            PdfWriter.getInstance(document, new FileOutputStream(FILE));
            document.open();
            addMetaData();
            addTitle();
            dododo();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }

    private void addMetaData()
    {
        document.addTitle("Report");
        document.addSubject("Using iText");
        document.addAuthor("9");
        document.addCreator("DA, DA 9");
    }

    private void addTitle()
    {
        Paragraph preface = new Paragraph();
        addEmptyLine(preface, 1);
        preface.add(new Paragraph("Title", t_font));
        addEmptyLine(preface, 1);
        String deFirst = "Report generated by " + System.getProperty("user.name") + ", " + new Date() + " \n" + "Services\' days: " + takeDates();
        preface.add(new Paragraph(deFirst, c_font));
        try
        {
            document.add(preface);
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        document.newPage();
    }

    private void dododo()
    {
        Anchor anchor = new Anchor("Service", t_font);
        anchor.setName("Services");
        Paragraph ph = new Paragraph(anchor);
        Chapter chapter = new Chapter(ph, 1);
        //Section section = chapter.addSection(ph);

        PdfPTable table = new PdfPTable(7);
        table.setWidthPercentage(100);
        table.setSpacingBefore(20f);
        table.setSpacingAfter(20f);
        PdfPCell pfpc;

        pfpc = new PdfPCell(new Phrase("ID"));
        pfpc.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(pfpc);

        pfpc = new PdfPCell(new Phrase("Service type"));
        pfpc.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(pfpc);

        pfpc = new PdfPCell(new Phrase("Date"));
        pfpc.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(pfpc);

        pfpc = new PdfPCell(new Phrase("Employee"));
        pfpc.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(pfpc);

        pfpc = new PdfPCell(new Phrase("Employee\'s cut"));
        pfpc.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(pfpc);

        pfpc = new PdfPCell(new Phrase("Client"));
        pfpc.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(pfpc);

        pfpc = new PdfPCell(new Phrase("Price"));
        pfpc.setHorizontalAlignment(Element.ALIGN_CENTER);
        table.addCell(pfpc);

        for(Service s : ss)
        {
            if(s.isRELEVANT() != false)
            {
                table.addCell("" + s.getID());
                table.addCell(s.getServiceType().getDescription() + " - " + s.getServiceType().getID());
                table.addCell(Salon.doOnlyDate(s.getDateBegin()));
                table.addCell(s.getEmployee().getName() + " - " + s.getEmployee().getID());
                table.addCell("" + s.getCashReward());
                table.addCell(s.getClient().getName() + " - " + s.getClient().getID());
                table.addCell("" + s.getPrice());
            }
        }
        table.setHeaderRows(1);
        chapter.add(table);
        try
        {
            document.add(chapter);
            document.newPage();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        finally
        {
            doClose();
        }
    }

    @SuppressWarnings( "deprecation" )
    private String takeDates()
    {
        String res = "";
        if(D_W_M == 0)
            res = Salon.doOnlyDate(d);
        else if(D_W_M == 1)
        {
            Date[] dts = Salon.getWeekKnowsDay(d);
            res = Salon.doOnlyDate(dts[0]) + " - " + Salon.doOnlyDate(dts[6]);
        }
        else if(D_W_M == 2)
        {
            Date be = new Date(d.getTime()); be.setDate(1);
            Date en = new Date(d.getTime()); en.setDate(30); // DA 6Jl*! 30 uJlu 31? uJlu 29?
            res = Salon.doOnlyDate(be) + " - " + Salon.doOnlyDate(en);
        }
        return res;
    }

    private static void addEmptyLine(Paragraph paragraph, int number)
    {
        for (int i = 0; i < number; ++i)
        {
            paragraph.add(new Paragraph(" "));
        }
    }

    private boolean isOpen()
    {
        return document.isOpen();
    }

    private void doOpen()
    {
        document.open();
    }

    private void doClose()
    {
        document.close();
    }
}